## Week 5 Homework Submission File: Archiving and Logging Data

Please edit this file by adding the solution commands on the line below the prompt.

Save and submit the completed file for your homework submission.

---

### Step 1: Create, Extract, Compress, and Manage tar Backup Archives

1. Command to **extract** the `TarDocs.tar` archive to the current directory: tar -xvf TarDocs.tar : /home/sysadmin/Downloads/TarDocs.tar

2. Command to **create** the `Javaless_Doc.tar` archive from the `TarDocs/` directory, while excluding the `TarDocs/Documents/Java` directory:
sudo tar -cvf Javaless_Doc.tar --exclude "TarDocs/Documents/Java" TarDocs

3. Command to ensure `Java/` is not in the new `Javaless_Docs.tar` archive: 
tar -tvf Javaless_Doc.tar | grep Java

**Bonus** 
- Command to create an incremental archive called `logs_backup_tar.gz` with only changed files to `snapshot.file` for the `/var/log` directory:

tar --create\
      -file=log_backup.tar.gz
      -listed-incremental=/var/log/snapshot\
      /var/log

#### Critical Analysis Question

- Why wouldn't you use the options `-x` and `-c` at the same time with `tar`?

-c is for create 
-x is for extract if we use it together it would give an error since it needs to be created first with -c and then extracted cannot extract a file without creating it
---

### Step 2: Create, Manage, and Automate Cron Jobs

1. Cron job for backing up the `/var/log/auth.log` file:

0 6 * * 3 tar -cjf /var/log/auth_backup.tgz /var/log/auth.log

---

### Step 3: Write Basic Bash Scripts

1. Brace expansion command to create the four subdirectories: mkdir -p ~/backups/{freemem,diskuse,openlist,freedisk}


2. Paste your `system.sh` script edits below:

  
#!/bin/bash

free_mem=~/backups/freemem/free_mem.txt
disk_usage=~/backups/diskuse/disk_usage.txt
lsof=~/backups/openlist/open_list.txt
freedisk=~/backups/freedisk/freedisk.txt

cat /proc/meminfo | grep MemFree>$free_mem
df -h>$disk_usage
lsof | less>$lsof
df -kh>$freedisk


3. Command to make the `system.sh` script executable:

chmod u+x system.sh
./system.sh


**Optional**
- Commands to test the script and confirm its execution:
./system.sh
cd ~/backups
Check all the four folders there and the files in them


**Bonus**
- Command to copy `system` to system-wide cron directory:
cd /etc/
crontab -e
cp system 

---

### Step 4. Manage Log File Sizes
 
1. Run `sudo nano /etc/logrotate.conf` to edit the `logrotate` configuration file. 

    Configure a log rotation scheme that backs up authentication messages to the `/var/log/auth.log`.

#!/bin/bash
  /var/log/auth.log {
            rotate 7 
            Weekly
            compress
            delaycompress
            endscript
        }

### Bonus: Check for Policy and File Violations

1. Command to verify `auditd` is active: systemctl status auditd

2. Command to set number of retained logs and maximum log file size: 
sudo nano /etc/audit/auditd.conf

    - Add the edits made to the configuration file below:

#!/bin/bash
   num_logs = 10
   max_log_file = 50

3. Command using `auditd` to set rules for `/etc/shadow`, `/etc/passwd` and `/var/log/auth.log`:

   sudo nano /etc/audit/rules.d/audit.rules
      -w /etc/shadow -p wa -k shadow
      -w /etc/passwd -p wa -k passwd



4. Command to restart `auditd`:

    sudo systemctl restart auditd

5. Command to list all `auditd` rules:
   
   sudo auditctl -l
  

6. Command to produce an audit report: sudo aureport -au
 
7. Create a user with `sudo useradd attacker` and produce an audit report that lists account modifications: sudo useradd attacker , sudo aureport -m

Account Modifications Report
=================================================
# date time auid addr term exe acct success event
=================================================
1. 07/05/2021 07:23:00 1000 UbuntuDesktop pts/0 /usr/sbin/useradd attacker yes 397
2. 07/05/2021 07:23:00 1000 UbuntuDesktop pts/0 /usr/sbin/useradd ? yes 398


8. Command to use `auditd` to watch `/var/log/cron`: sudo aureport -au

9. Command to verify `auditd` rules: sudo auditctl -l

---

### Bonus (Research Activity): Perform Various Log Filtering Techniques

1. Command to return `journalctl` messages with priorities from emergency to error: journalctl -p crit

1. Command to check the disk usage of the system journal unit since the most recent boot: grep Storage /etc/systemd/journald.conf
output should appear as 
  #Storage=auto
journalctl --disk-usage

1. Comand to remove all archived journal files except the most recent two: sudo journalctl --rotate --vacuum-files=2


1. Command to filter all log messages with priority levels between zero and two, and save output to `/home/sysadmin/Priority_High.txt`:

sudo su journalctl -p 0 -p 2 > Priority_High.txt


1. Command to automate the last command in a daily cronjob. Add the edits made to the crontab file below:
0 0 * * * journalctl -p 0 -p 2 > Priority_High.txt

---
Â© 2020 Trilogy Education Services, a 2U, Inc. brand. All Rights Reserved.
